<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>告别蓝牙失联！Win笔记本&quot;代码43&quot;错误自救指南</title>
    <link href="/2025/08/10/%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/10/%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="告别蓝牙失联！Win笔记本”代码43”错误自救指南"><a href="#告别蓝牙失联！Win笔记本”代码43”错误自救指南" class="headerlink" title="告别蓝牙失联！Win笔记本”代码43”错误自救指南"></a>告别蓝牙失联！Win笔记本”代码43”错误自救指南</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>问题表述：笔记本开启节能模式或息屏后，蓝牙功能突然“消失”不见，设备管理器里显示蓝牙模块带感叹号，并提示“由于该设备有问题，Windows 已将其停止。(代码 43)”本文将分享最近解决这一问题的经验，快速恢复蓝牙功能，无需重启电脑！</p><h2 id="问题发现：息屏后蓝牙失效"><a href="#问题发现：息屏后蓝牙失效" class="headerlink" title="问题发现：息屏后蓝牙失效"></a>问题发现：息屏后蓝牙失效</h2><p>最近，我的Windows笔记本电脑遇到了一个令人头疼的问题。为了省电，我通常会开启系统的节能模式。然而，我注意到一个奇怪的现象：当笔记本息屏一段时间后，或者从休眠状态唤醒时，原本正常工作的蓝牙功能竟然“消失”了！</p><p>打开Windows设置界面，原本应该有的蓝牙开关和选项不见踪影，就好像笔记本电脑根本没有蓝牙模块一样。这导致我所有的蓝牙外设，如蓝牙耳机、鼠标等，都无法连接，严重影响了日常使用。</p><h2 id="问题定位：“代码43”错误浮出水面"><a href="#问题定位：“代码43”错误浮出水面" class="headerlink" title="问题定位：“代码43”错误浮出水面"></a>问题定位：“代码43”错误浮出水面</h2><p>面对蓝牙的“人间蒸发”，我首先想到了去设备管理器查看。</p><ol><li>按下 <code>Win + X</code> 键，选择 <code>设备管理器</code>。</li><li>展开 <code>蓝牙</code> 类别。</li></ol><p>果然，在蓝牙设备列表中，我发现我的蓝牙适配器（显示为“英特尔(R) 无线 Bluetooth(R)”）旁边显示着一个<strong>黄色的感叹号</strong></p><p><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/%E8%93%9D%E7%89%99%E5%A4%B1%E6%95%88%E6%88%AA%E5%9B%BE.png" alt="设备管理器中的蓝牙设备"><br><em>图1：设备管理器中带有感叹号的蓝牙设备</em></p><p>双击该设备，查看其属性，在“常规”选项卡下，我看到了这样的提示信息：</p><blockquote><p><strong>“由于该设备有问题，Windows 已将其停止。 (代码 43)”</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/%E8%93%9D%E7%89%99%E6%81%A2%E5%A4%8D%E6%88%AA%E5%9B%BE.png" alt="设备管理器中的蓝牙设备列表"><br><em>图2：蓝牙设备列表恢复后</em></p><p>这个“代码43”错误清晰地指出了问题的根源：Windows系统检测到蓝牙设备存在故障，并为了避免更深层的问题而将其禁用了。而我发现，这个错误常常在节能模式下息屏或休眠后出现，让我联想到可能是电源管理策略导致了蓝牙模块的异常。</p><h2 id="解决过程：禁用再启用，轻松修复！"><a href="#解决过程：禁用再启用，轻松修复！" class="headerlink" title="解决过程：禁用再启用，轻松修复！"></a>解决过程：禁用再启用，轻松修复！</h2><p>在排除了硬件彻底损坏的可能性后（因为重启电脑通常可以恢复），我决定尝试一种不需要重启电脑的方法。</p><p><strong>修复步骤如下：</strong></p><ol><li>继续保持在 <strong>设备管理器</strong> 界面。</li><li>在 <code>蓝牙</code> 类别下，找到带有黄色感叹号的蓝牙适配器（例如：“英特尔(R) 无线 Bluetooth(R)”）。</li><li><strong>右键点击</strong> 该蓝牙设备。</li><li>在弹出的菜单中，选择 <strong><code>禁用设备</code></strong>。<ul><li>此时系统会提示你“禁用此设备会使其停止工作。确实要禁用它吗？”，点击 <strong><code>是</code></strong> 确认。</li></ul></li><li>等待几秒钟，你会发现该蓝牙设备的图标上会多出一个向下的箭头，表示它已被禁用。</li><li>再次 <strong>右键点击</strong> 该蓝牙设备。</li><li>在弹出的菜单中，选择 <strong><code>启用设备</code></strong>。</li></ol><p>完成上述操作后，奇迹发生了！那个烦人的黄色感叹号消失了，蓝牙设备恢复了正常工作状态。随即，Windows设置中的蓝牙开关也重新出现，我的蓝牙外设也能够正常连接使用了。</p><h2 id="经验总结与思考"><a href="#经验总结与思考" class="headerlink" title="经验总结与思考"></a>经验总结与思考</h2><p>这次解决蓝牙问题的过程让我意识到：</p><ul><li><strong>“代码43”错误不一定意味着硬件损坏。</strong> 它更可能表示设备或驱动程序处于异常状态。</li><li><strong>电源管理设置可能是幕后黑手。</strong> 节能模式下，系统可能会过度优化，导致某些设备（如蓝牙模块）在恢复时未能正确初始化。</li><li><strong>“禁用再启用”。</strong> 这种方法相当于给设备进行了一次“软重启”，通常能够解决驱动程序或设备状态的临时性故障，而且最重要的是，它不需要重启整个电脑，非常适合有重要任务在运行不能关机的情况。</li></ul><p>希望这篇博客能帮到你！</p>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>硬件问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>蓝牙</tag>
      
      <tag>故障排除</tag>
      
      <tag>代码43</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程：如何正确引用GitHub仓库图片到Hexo博客</title>
    <link href="/2025/07/16/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%BC%95%E7%94%A8GitHub%E4%BB%93%E5%BA%93%E5%9B%BE%E7%89%87%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/07/16/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%BC%95%E7%94%A8GitHub%E4%BB%93%E5%BA%93%E5%9B%BE%E7%89%87%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在撰写Hexo博客时，如何稳定、高效地管理和引用图片是一个常见问题。许多博主选择使用GitHub作为免费的图床，但这其中有一些常见的“坑”，比如图片链接失效、图片不显示等。本文将详细总结从创建仓库到在Markdown中正确引用图片，再到最终发布的完整流程和注意事项。</p><h2 id="流程概览"><a href="#流程概览" class="headerlink" title="流程概览"></a>流程概览</h2><ol><li><strong>创建</strong>一个<strong>公开</strong>的GitHub仓库作为图床。</li><li><strong>上传</strong>图片文件到该仓库。</li><li><strong>获取</strong>图片的<strong>正确链接</strong>（这是最关键的一步！）。</li><li>在Markdown文章中<strong>引用</strong>图片链接。</li><li><strong>部署</strong>您的Hexo博客。</li></ol><hr><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="第一步：创建公开的GitHub仓库"><a href="#第一步：创建公开的GitHub仓库" class="headerlink" title="第一步：创建公开的GitHub仓库"></a>第一步：创建公开的GitHub仓库</h3><p>为了让所有人都能访问到您的图片，存放图片的GitHub仓库<strong>必须是公开的（Public）</strong>。如果是私有仓库（Private），则只有您自己登录后才能看到图片，您的读者将看到一个破碎的图片图标🏞️。</p><h3 id="第二步：上传图片到仓库"><a href="#第二步：上传图片到仓库" class="headerlink" title="第二步：上传图片到仓库"></a>第二步：上传图片到仓库</h3><p>您可以直接在GitHub网页上或者使用Git客户端将图片文件上传到您的图床仓库中。建议在仓库里创建一个专门的文件夹（如 <code>images</code> 或 <code>assets</code>）来存放图片，方便管理。</p><h3 id="第三步：获取正确的图片URL（核心）"><a href="#第三步：获取正确的图片URL（核心）" class="headerlink" title="第三步：获取正确的图片URL（核心）"></a>第三步：获取正确的图片URL（核心）</h3><p>这是最容易出错的地方。我们来深入理解一下不同链接之间的区别。</p><h4 id="链接辨析：网页-vs-原始文件"><a href="#链接辨析：网页-vs-原始文件" class="headerlink" title="链接辨析：网页 vs 原始文件"></a>链接辨析：网页 vs 原始文件</h4><h5 id="1-错误的链接：github-com-网页链接"><a href="#1-错误的链接：github-com-网页链接" class="headerlink" title="1. 错误的链接：github.com 网页链接"></a>1. 错误的链接：<code>github.com</code> 网页链接</h5><ul><li><strong>格式</strong>: <code>https://github.com/USERNAME/REPO/blob/main/images/demo.png</code></li><li><strong>这是什么</strong>: 当你在浏览器中打开这个链接，你看到的不仅仅是图片，而是一个完整的<strong>GitHub网页</strong>，它包含了导航栏、文件列表、代码操作按钮等元素，您的图片只是内嵌在其中。</li><li><strong>为何错误</strong>: 在Markdown中使用 <code>![]()</code> 语法时，它需要一个纯粹的图片文件。你给它一个完整的HTML网页，浏览器无法将其渲染为图片，因此链接会失效。</li><li><strong>一个比喻</strong>: 这就像想在相框里放一张照片，却把整个照相馆（连同前台、沙发和摄影师）都硬塞了进去，相框当然装不下。</li></ul><h5 id="2-正确的链接：raw-githubusercontent-com-原始文件链接"><a href="#2-正确的链接：raw-githubusercontent-com-原始文件链接" class="headerlink" title="2. 正确的链接：raw.githubusercontent.com 原始文件链接"></a>2. 正确的链接：<code>raw.githubusercontent.com</code> 原始文件链接</h5><ul><li><strong>格式</strong>: <code>https://raw.githubusercontent.com/USERNAME/REPO/main/images/demo.png</code></li><li><strong>这是什么</strong>: 这是GitHub专门用来提供**文件原始数据（Raw Content）**的CDN服务器地址。访问这个链接，返回的是没有任何多余元素的、纯粹的图片文件数据。</li><li><strong>为何正确</strong>: 这个链接直接指向图片文件本身，浏览器可以毫无障碍地识别并渲染它。</li><li><strong>继续比喻</strong>: 这个链接相当于直接把<strong>照片本身</strong>递给了相框，完美匹配。</li></ul><h4 id="技巧：如何快速获取正确的图片链接"><a href="#技巧：如何快速获取正确的图片链接" class="headerlink" title="技巧：如何快速获取正确的图片链接"></a>技巧：如何快速获取正确的图片链接</h4><p>你不需要手动修改URL。GitHub提供了一个非常简单的方法来获取正确的原始链接，这是一个百试百灵的技巧：</p><ol><li><strong>第一步：在GitHub上找到您的图片文件</strong><br>打开您的图床仓库，并导航到您想要引用的图片文件页面。</li><li><strong>第二步：找到 “Download” 按钮</strong><br>在图片预览的右上方，你会看到几个按钮，其中有一个是 <strong>“Download”</strong>（下载）按钮。</li><li><strong>第三步：右键复制链接（最关键）</strong><br>将鼠标光标移动到 <strong>“Download”</strong> 按钮上，然后点击鼠标<strong>右键</strong>，在弹出的菜单中选择 <strong>“复制链接地址”</strong> (Copy Link Address) 或类似的选项。</li><li><strong>第四步：粘贴到Markdown</strong><br>现在你的剪贴板里的链接就是格式为 <code>https://raw.githubusercontent.com/...</code> 的正确链接了。直接将它粘贴到你的Markdown文档中即可！</li></ol><p>这样操作，既快速又保证100%正确，再也不用担心链接引用错误的问题了。</p><h3 id="第四步：在Markdown中引用图片"><a href="#第四步：在Markdown中引用图片" class="headerlink" title="第四步：在Markdown中引用图片"></a>第四步：在Markdown中引用图片</h3><p>使用标准的Markdown语法即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">这里是图片的描述文字</span>](<span class="hljs-link">https://raw.githubusercontent.com/USERNAME/REPO/main/images/demo.png</span>)<br></code></pre></td></tr></table></figure><h3 id="第五步：部署您的Hexo博客"><a href="#第五步：部署您的Hexo博客" class="headerlink" title="第五步：部署您的Hexo博客"></a>第五步：部署您的Hexo博客</h3><p>在确认文章和图片链接无误后，执行标准的部署流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 清理旧缓存</span><br>hexo clean<br><br><span class="hljs-comment"># 2. 生成新的静态文件</span><br>hexo g<br><br><span class="hljs-comment"># 3. 部署到您的网站</span><br>hexo d<br></code></pre></td></tr></table></figure><hr><h2 id="注意事项与问题排查"><a href="#注意事项与问题排查" class="headerlink" title="注意事项与问题排查"></a>注意事项与问题排查</h2><ol><li><strong>仓库必须公开</strong>：再次强调，这是图片能否被外部访问的前提。</li><li><strong>文章日期问题</strong>：如果您发现某篇文章在本地存在，但部署后网站上没有显示，请检查文章头部的 <code>date</code>字段。如果日期是一个未来的时间，Hexo默认是不会生成这篇文章的。将其修改为当前或过去的时间即可。</li><li><strong>缓存问题</strong>：在排查问题时，如果确认修改无误但网站仍未更新，请务必<strong>强制刷新</strong>您的浏览器缓存（通常是 <code>Ctrl + Shift + R</code> 或 <code>Cmd + Shift + R</code>）。</li><li><strong>检查URL拼写</strong>：一个字母或符号的错误都会导致链接失效。请仔细核对您的用户名、仓库名、分支名（通常是 <code>main</code>）和文件路径。</li><li><strong>直接访问URL测试</strong>：将最终使用的图片URL直接粘贴到浏览器地址栏并访问。如果图片能正常显示，说明链接本身是有效的。</li><li>GitHub 的原始图片链接格式有误。在 GitHub 中，当你要直接访问原始图片时，URL 中的 “blob&#x2F;main” 应该改为 “main。</li></ol><p>希望这篇总结能帮助您彻底解决Hexo博客中的图片引用问题！</p>]]></content>
    
    
    <categories>
      
      <category>博客教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>Markdown</tag>
      
      <tag>图片引用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署 Gemini CLI 的排错与解决方案</title>
    <link href="/2025/07/15/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%83%A8%E7%BD%B2Gemini-cli%E5%BF%83%E5%BE%97/"/>
    <url>/2025/07/15/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%83%A8%E7%BD%B2Gemini-cli%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="部署-Gemini-CLI-的排错与解决方案"><a href="#部署-Gemini-CLI-的排错与解决方案" class="headerlink" title="部署 Gemini CLI 的排错与解决方案"></a>部署 Gemini CLI 的排错与解决方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Google Gemini 以其强大的多模态能力吸引了无数开发者，Gemini CLI 则为我们提供了在终端中与其交互的便捷方式。对于国内开发者来说，部署过程中常遇到网络和认证等问题。本文记录本人部署 Gemini CLI 的完整排错过程及最终解决方案，希望能帮你少走弯路。</p><h2 id="Step-1-基础准备"><a href="#Step-1-基础准备" class="headerlink" title="Step 1: 基础准备"></a>Step 1: 基础准备</h2><p>请确保你已准备好以下内容：</p><ol><li><strong>Node.js 环境</strong>（推荐 18.x 或更高版本，请自备）</li><li><strong>网络代理工具</strong>（如 Clash、V2RayN）</li><li><strong>Gemini API 密钥</strong>（可在 <a href="https://ai.google.dev/">Google AI Studio</a> 免费获取，可选吧）</li></ol><blockquote><p>注意：Gemini CLI 是基于 Node.js 开发的工具，不是 Python 工具。这是与其他一些 AI 工具的主要区别之一。</p></blockquote><h2 id="Step-2-安装-Gemini-CLI"><a href="#Step-2-安装-Gemini-CLI" class="headerlink" title="Step 2: 安装 Gemini CLI"></a>Step 2: 安装 Gemini CLI</h2><p>在终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @google/gemini-cli<br></code></pre></td></tr></table></figure><p>或者，如果你只想尝试而不想全局安装，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx https://github.com/google-gemini/gemini-cli<br></code></pre></td></tr></table></figure><p>安装完成后，<code>gemini</code> 命令即可使用。</p><h2 id="Step-3-排错全过程复盘"><a href="#Step-3-排错全过程复盘" class="headerlink" title="Step 3: 排错全过程复盘"></a>Step 3: 排错全过程复盘</h2><h3 id="1-Waiting-for-auth-Login-with-Google-失败"><a href="#1-Waiting-for-auth-Login-with-Google-失败" class="headerlink" title="1. Waiting for auth... &amp; Login with Google 失败"></a>1. <code>Waiting for auth...</code> &amp; <code>Login with Google</code> 失败</h3><ul><li><strong>问题</strong>：卡在 <code>Waiting for auth...</code>，选择 <code>Login with Google</code> 报错：需设置 <code>GOOGLE_CLOUD_PROJECT</code>。</li><li><strong>原因</strong>：Google 账号需绑定 GCP 项目，个人开发者不便。</li><li><strong>解决</strong>：放弃 Google 登录，改用 API 密钥。</li></ul><h3 id="2-GEMINI-API-KEY-not-found"><a href="#2-GEMINI-API-KEY-not-found" class="headerlink" title="2. GEMINI_API_KEY not found"></a>2. <code>GEMINI_API_KEY not found</code></h3><ul><li><strong>问题</strong>：选择 <code>Use Gemini API Key</code>，提示找不到环境变量。</li><li><strong>解决</strong>：设置环境变量（建议同时设置 <code>GEMINI_API_KEY</code> 和 <code>GOOGLE_API_KEY</code>）。</li></ul><p><strong>Bash (macOS&#x2F;Linux)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GEMINI_API_KEY=<span class="hljs-string">&quot;你的API密钥&quot;</span><br><span class="hljs-built_in">export</span> GOOGLE_API_KEY=<span class="hljs-string">&quot;你的API密钥&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Windows (CMD)：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> GEMINI_API_KEY=你的API密钥<br><span class="hljs-built_in">set</span> GOOGLE_API_KEY=你的API密钥<br></code></pre></td></tr></table></figure><h3 id="3-请求无响应-代理设置（端口号请自己确认是不是自己代理走的端口号）"><a href="#3-请求无响应-代理设置（端口号请自己确认是不是自己代理走的端口号）" class="headerlink" title="3. 请求无响应 &amp; 代理设置（端口号请自己确认是不是自己代理走的端口号）"></a>3. 请求无响应 &amp; 代理设置（端口号请自己确认是不是自己代理走的端口号）</h3><ul><li><strong>问题</strong>：认证通过但网络无响应，超时失败。</li><li><strong>原因</strong>：Gemini CLI 不会自动读取系统代理。</li><li><strong>解决</strong>：为终端会话设置 <code>https_proxy</code> 环境变量。<br> <img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%83%A8%E7%BD%B2Gemini-cli%E5%BF%83%E5%BE%97/%E4%BB%A3%E7%90%86TUN%E6%A8%A1%E5%BC%8F.png" alt="代理 示例"></li></ul><p><strong>Bash (macOS&#x2F;Linux)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p><strong>Windows (CMD)：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> https_proxy=http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>设置好 API 密钥和代理后，Gemini CLI 即可正常使用。</p><p><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%83%A8%E7%BD%B2Gemini-cli%E5%BF%83%E5%BE%97/GEMINI.png" alt="Gemini CLI 使用示例"></p><p>参考文章：<a href="https://juejin.cn/post/7520139212605128714">国内使用 Gemini CLI 常见登录授权失败：安装与排错指南国内使用 Gemini CLI 常见登录授权失败,网络问 - 掘金</a></p><h2 id="Step-4-解决方案——TUN-模式"><a href="#Step-4-解决方案——TUN-模式" class="headerlink" title="Step 4: 解决方案——TUN 模式"></a>Step 4: 解决方案——TUN 模式</h2><p>每次手动设置代理环境变量较为繁琐。推荐开启代理软件（如 Clash）的 <strong>TUN 模式</strong>，让系统所有流量自动走代理，无需每次手动设置。</p><p><strong>操作方法（以 Clash 为例）：</strong></p><ol><li>在 Clash 设置中开启”TUN模式”或”虚拟网卡”。</li><li>授权相关系统权限。</li><li>启用后，所有应用（包括终端）都能自动代理，无需再设置 <code>https_proxy</code>。</li></ol><h2 id="总结：最佳实践工作流"><a href="#总结：最佳实践工作流" class="headerlink" title="总结：最佳实践工作流"></a>总结：最佳实践工作流</h2><ol><li><strong>一次性配置</strong>：将 <code>GEMINI_API_KEY</code> 和 <code>GOOGLE_API_KEY</code> 添加为系统环境变量（macOS&#x2F;Linux 写入 <code>~/.zshrc</code> 或 <code>~/.bashrc</code>，Windows 通过”系统属性-环境变量”设置）。</li><li><strong>开启 TUN 模式</strong>：日常只需打开代理软件并确保 TUN 模式开启。</li><li><strong>直接使用</strong>：随时在终端输入 <code>gemini &quot;你的问题&quot;</code>，无需额外设置。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>部署 Gemini CLI 的过程虽有波折，但通过合理设置环境变量和代理，结合 TUN 模式，完全可以顺利使用。希望本指南能为你提供帮助。<br>后续：由于我在别的终端设置时使用Gemini CLI遇到新的问题，后续找到解决办法再解决。</p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
      <category>AI工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gemini</tag>
      
      <tag>CLI</tag>
      
      <tag>Google AI</tag>
      
      <tag>代理设置</tag>
      
      <tag>问题排查</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java版本兼容性与Maven依赖问题全解析</title>
    <link href="/2025/07/08/Java%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E6%80%A7%E4%B8%8EMaven%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/08/Java%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E6%80%A7%E4%B8%8EMaven%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="☕-Java版本兼容性与Maven依赖问题全解析"><a href="#☕-Java版本兼容性与Maven依赖问题全解析" class="headerlink" title="☕ Java版本兼容性与Maven依赖问题全解析"></a>☕ Java版本兼容性与Maven依赖问题全解析</h1><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E5%A7%8B%E7%97%87%E7%8A%B6">问题背景与初始症状</a></li><li><a href="#%E5%85%B3%E9%94%AE%E7%BA%BF%E7%B4%A2%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9A%E9%94%99%E8%AF%AF">关键线索：文件锁定错误</a></li><li><a href="#%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%E7%A1%AE%E8%AE%A4eset-%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%B9%B2%E6%89%B0">根本原因确认：ESET 杀毒软件的干扰</a></li><li><a href="#eset-%E5%A6%82%E4%BD%95%E5%AF%BC%E8%87%B4-maven-pom-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98">ESET 如何导致 Maven POM 配置问题</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB">解决方案汇总</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ol><hr><h2 id="1-问题背景与初始症状"><a href="#1-问题背景与初始症状" class="headerlink" title="1. 问题背景与初始症状"></a>1. 问题背景与初始症状</h2><p>在使用 IntelliJ IDEA 进行 Maven 项目开发时，遇到如下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Non-resolvable <span class="hljs-keyword">import</span> POM: The <span class="hljs-keyword">following</span> artifacts could <span class="hljs-keyword">not</span> be resolved: org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 (absent): org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 failed <span class="hljs-keyword">to</span> transfer <span class="hljs-keyword">from</span> https://repo.maven.apache.org/maven2 during a previous attempt. This failure was cached <span class="hljs-keyword">in</span> the <span class="hljs-keyword">local</span> repository <span class="hljs-keyword">and</span> resolution <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> reattempted <span class="hljs-keyword">until</span> the <span class="hljs-keyword">update</span> <span class="hljs-type">interval</span> <span class="hljs-keyword">of</span> central has elapsed <span class="hljs-keyword">or</span> updates are forced. Original error: Could <span class="hljs-keyword">not</span> transfer artifact org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 <span class="hljs-keyword">from</span>/<span class="hljs-keyword">to</span> central (https://repo.maven.apache.org/maven2): <span class="hljs-keyword">Connect</span> <span class="hljs-keyword">to</span> repo.maven.apache.org:<span class="hljs-number">443</span> [repo.maven.apache.org/<span class="hljs-number">146.75</span><span class="hljs-number">.112</span><span class="hljs-number">.215</span>] failed: <span class="hljs-keyword">Connect</span> timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>Maven 无法从远程仓库下载依赖，核心原因是 <code>Connect timed out</code>（连接超时）。这通常与中国地区访问境外 Maven 仓库的网络限制有关。</p><hr><h2 id="2-关键线索：文件锁定错误"><a href="#2-关键线索：文件锁定错误" class="headerlink" title="2. 关键线索：文件锁定错误"></a>2. 关键线索：文件锁定错误</h2><p>后续又遇到如下错误：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Could</span> <span class="hljs-variable"><span class="hljs-keyword">not</span></span> <span class="hljs-variable">acquire</span> <span class="hljs-function"><span class="hljs-title">lock</span>(<span class="hljs-variable">s</span>)</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>该错误表明文件或资源被其他进程占用，Maven 或 IntelliJ IDEA 无法获得独占锁，导致操作失败。</p><hr><h2 id="3-根本原因确认：ESET-杀毒软件的干扰"><a href="#3-根本原因确认：ESET-杀毒软件的干扰" class="headerlink" title="3. 根本原因确认：ESET 杀毒软件的干扰"></a>3. 根本原因确认：ESET 杀毒软件的干扰</h2><p>经过排查，发现是电脑上的 <strong>ESET 杀毒软件</strong> 导致了文件锁定问题。</p><hr><h2 id="4-ESET-如何导致-Maven-POM-配置问题"><a href="#4-ESET-如何导致-Maven-POM-配置问题" class="headerlink" title="4. ESET 如何导致 Maven POM 配置问题"></a>4. ESET 如何导致 Maven POM 配置问题</h2><ul><li><p><strong>文件锁定（File Locking）：</strong><br>ESET 的实时文件系统保护会扫描 Maven 本地仓库（如 <code>~/.m2/repository</code>），在扫描过程中锁定文件，阻止 Maven 正常读写，导致依赖无法下载或校验。</p></li><li><p><strong>网络拦截（Network Interception）：</strong><br>ESET 可能会拦截 Maven 与远程仓库的连接，加剧 <code>Connect timed out</code> 问题。</p></li></ul><hr><h2 id="5-解决方案汇总"><a href="#5-解决方案汇总" class="headerlink" title="5. 解决方案汇总"></a>5. 解决方案汇总</h2><h3 id="5-1-针对-ESET-杀毒软件的解决方案（核心）"><a href="#5-1-针对-ESET-杀毒软件的解决方案（核心）" class="headerlink" title="5.1 针对 ESET 杀毒软件的解决方案（核心）"></a>5.1 针对 ESET 杀毒软件的解决方案（核心）</h3><ul><li><p><strong>添加排除项（Exclusions）：</strong></p><ul><li>排除 Maven 本地仓库目录（如 <code>C:\Users\你的用户名\.m2\repository</code>）</li><li>排除 IntelliJ IDEA 安装及工作目录</li><li>排除 Java (JVM) 进程（如 <code>java.exe</code>、<code>javaw.exe</code>）</li></ul></li><li><p><strong>操作步骤示例：</strong></p><ol><li>打开 ESET 主界面</li><li>设置 → 高级设置（F5）</li><li>检测引擎 → 实时文件系统保护 → 排除项</li><li>添加需要排除的文件夹或文件</li></ol></li><li><p><strong>临时禁用 ESET 实时保护</strong>（仅在必要时，操作完毕后务必重新启用）</p></li></ul><h3 id="5-2-配置-Maven-镜像仓库（解决网络连接超时）"><a href="#5-2-配置-Maven-镜像仓库（解决网络连接超时）" class="headerlink" title="5.2 配置 Maven 镜像仓库（解决网络连接超时）"></a>5.2 配置 Maven 镜像仓库（解决网络连接超时）</h3><ul><li><p>编辑 <code>~/.m2/settings.xml</code>，添加阿里云镜像：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Aliyun Maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 IntelliJ IDEA 中指定 <code>settings.xml</code> 路径。</p></li></ul><h3 id="5-3-强制刷新-Maven-本地仓库与项目"><a href="#5-3-强制刷新-Maven-本地仓库与项目" class="headerlink" title="5.3 强制刷新 Maven 本地仓库与项目"></a>5.3 强制刷新 Maven 本地仓库与项目</h3><ul><li><p>删除本地仓库中相关 <code>.lastUpdated</code> 文件或整个依赖文件夹</p></li><li><p>运行命令强制更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean install -U<br></code></pre></td></tr></table></figure></li><li><p>在 IntelliJ IDEA 中点击 Maven Projects → Reimport All Maven Projects，并勾选 Force Update</p></li></ul><h3 id="5-4-IntelliJ-IDEA-相关操作"><a href="#5-4-IntelliJ-IDEA-相关操作" class="headerlink" title="5.4 IntelliJ IDEA 相关操作"></a>5.4 IntelliJ IDEA 相关操作</h3><ul><li>清除缓存并重启：<br><code>File → Invalidate Caches / Restart... → Invalidate and Restart</code></li></ul><h3 id="5-5-其他网络排查建议"><a href="#5-5-其他网络排查建议" class="headerlink" title="5.5 其他网络排查建议"></a>5.5 其他网络排查建议</h3><ul><li>检查本地防火墙设置</li><li>确保 DNS 能正确解析 Maven 仓库地址</li></ul><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>你遇到的 Maven POM 配置问题，是中国地区网络限制、Maven 缓存机制和 ESET 杀毒软件三者共同作用的结果。<br>通过<strong>添加 ESET 排除项</strong>、<strong>配置国内镜像</strong>、<strong>强制刷新依赖</strong>和<strong>清理 IDEA 缓存</strong>，可以彻底解决此类问题。</p><hr><blockquote><p><strong>遇到问题不可怕，关键是科学排查与系统解决。祝你开发顺利！</strong></p></blockquote><hr><p><em>如有更多问题，欢迎留言或通过 <a href="https://github.com/Changhuaishui">GitHub</a> 联系我。</em> </p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
      <tag>依赖</tag>
      
      <tag>版本兼容</tag>
      
      <tag>问题解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决个人在 IntelliJ 中部署 Maven 的 POM 文件出现的错误</title>
    <link href="/2025/07/07/%E8%A7%A3%E5%86%B3%E4%B8%AA%E4%BA%BA%E5%9C%A8intellij%E4%B8%AD%E9%83%A8%E7%BD%B2maven%E7%9A%84pom%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <url>/2025/07/07/%E8%A7%A3%E5%86%B3%E4%B8%AA%E4%BA%BA%E5%9C%A8intellij%E4%B8%AD%E9%83%A8%E7%BD%B2maven%E7%9A%84pom%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="🛠️-Maven-POM-配置与依赖解析问题诊断及解决方案（地区本人用户）"><a href="#🛠️-Maven-POM-配置与依赖解析问题诊断及解决方案（地区本人用户）" class="headerlink" title="🛠️ Maven POM 配置与依赖解析问题诊断及解决方案（地区本人用户）"></a>🛠️ Maven POM 配置与依赖解析问题诊断及解决方案（地区本人用户）</h1><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E5%A7%8B%E7%97%87%E7%8A%B6">问题背景与初始症状</a></li><li><a href="#%E5%85%B3%E9%94%AE%E7%BA%BF%E7%B4%A2%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9A%E9%94%99%E8%AF%AF">关键线索：文件锁定错误</a></li><li><a href="#%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%E7%A1%AE%E8%AE%A4eset-%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%B9%B2%E6%89%B0">根本原因确认：ESET 杀毒软件的干扰</a></li><li><a href="#eset-%E5%A6%82%E4%BD%95%E5%AF%BC%E8%87%B4-maven-pom-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98">ESET 如何导致 Maven POM 配置问题</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB">解决方案汇总</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ol><hr><h2 id="1-问题背景与初始症状"><a href="#1-问题背景与初始症状" class="headerlink" title="1. 问题背景与初始症状"></a>1. 问题背景与初始症状</h2><p>在使用 IntelliJ IDEA 进行 Maven 项目开发时，遇到如下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Non-resolvable <span class="hljs-keyword">import</span> POM: The <span class="hljs-keyword">following</span> artifacts could <span class="hljs-keyword">not</span> be resolved: org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 (absent): org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 failed <span class="hljs-keyword">to</span> transfer <span class="hljs-keyword">from</span> https://repo.maven.apache.org/maven2 during a previous attempt. This failure was cached <span class="hljs-keyword">in</span> the <span class="hljs-keyword">local</span> repository <span class="hljs-keyword">and</span> resolution <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> reattempted <span class="hljs-keyword">until</span> the <span class="hljs-keyword">update</span> <span class="hljs-type">interval</span> <span class="hljs-keyword">of</span> central has elapsed <span class="hljs-keyword">or</span> updates are forced. Original error: Could <span class="hljs-keyword">not</span> transfer artifact org.springframework.ai:spring-ai-bom:pom:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>-M6 <span class="hljs-keyword">from</span>/<span class="hljs-keyword">to</span> central (https://repo.maven.apache.org/maven2): <span class="hljs-keyword">Connect</span> <span class="hljs-keyword">to</span> repo.maven.apache.org:<span class="hljs-number">443</span> [repo.maven.apache.org/<span class="hljs-number">146.75</span><span class="hljs-number">.112</span><span class="hljs-number">.215</span>] failed: <span class="hljs-keyword">Connect</span> timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>Maven 无法从远程仓库下载依赖，核心原因是 <code>Connect timed out</code>（连接超时）。这通常与中国地区访问境外 Maven 仓库的网络限制有关。</p><hr><h2 id="2-关键线索：文件锁定错误"><a href="#2-关键线索：文件锁定错误" class="headerlink" title="2. 关键线索：文件锁定错误"></a>2. 关键线索：文件锁定错误</h2><p>后续又遇到如下错误：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Could</span> <span class="hljs-variable"><span class="hljs-keyword">not</span></span> <span class="hljs-variable">acquire</span> <span class="hljs-function"><span class="hljs-title">lock</span>(<span class="hljs-variable">s</span>)</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>该错误表明文件或资源被其他进程占用，Maven 或 IntelliJ IDEA 无法获得独占锁，导致操作失败。</p><hr><h2 id="3-根本原因确认：ESET-杀毒软件的干扰"><a href="#3-根本原因确认：ESET-杀毒软件的干扰" class="headerlink" title="3. 根本原因确认：ESET 杀毒软件的干扰"></a>3. 根本原因确认：ESET 杀毒软件的干扰</h2><p>经过排查，发现是电脑上的 <strong>ESET 杀毒软件</strong> 导致了文件锁定问题。</p><hr><h2 id="4-ESET-如何导致-Maven-POM-配置问题"><a href="#4-ESET-如何导致-Maven-POM-配置问题" class="headerlink" title="4. ESET 如何导致 Maven POM 配置问题"></a>4. ESET 如何导致 Maven POM 配置问题</h2><ul><li>**文件锁定（File Locking）：**ESET 的实时文件系统保护会扫描 Maven 本地仓库（如 <code>~/.m2/repository</code>），在扫描过程中锁定文件，阻止 Maven 正常读写，导致依赖无法下载或校验。</li><li><strong>网络拦截（Network Interception）：</strong><br>ESET 可能会拦截 Maven 与远程仓库的连接，加剧 <code>Connect timed out</code> 问题。</li></ul><hr><h2 id="5-解决方案汇总"><a href="#5-解决方案汇总" class="headerlink" title="5. 解决方案汇总"></a>5. 解决方案汇总</h2><h3 id="5-1-针对-ESET-杀毒软件的解决方案（核心）"><a href="#5-1-针对-ESET-杀毒软件的解决方案（核心）" class="headerlink" title="5.1 针对 ESET 杀毒软件的解决方案（核心）"></a>5.1 针对 ESET 杀毒软件的解决方案（核心）</h3><ul><li><p><strong>添加排除项（Exclusions）：</strong></p><ul><li>排除 Maven 本地仓库目录（如 <code>C:\Users\你的用户名\.m2\repository</code>）</li><li>排除 IntelliJ IDEA 安装及工作目录</li><li>排除 Java (JVM) 进程（如 <code>java.exe</code>、<code>javaw.exe</code>）</li></ul></li><li><p><strong>操作步骤示例：</strong></p><ol><li>打开 ESET 主界面</li><li>设置 → 高级设置（F5）</li><li>检测引擎 → 实时文件系统保护 → 排除项</li><li>添加需要排除的文件夹或文件</li></ol></li><li><p><strong>临时禁用 ESET 实时保护</strong>（仅在必要时，操作完毕后务必重新启用）</p></li></ul><h3 id="5-2-配置-Maven-镜像仓库（解决网络连接超时）"><a href="#5-2-配置-Maven-镜像仓库（解决网络连接超时）" class="headerlink" title="5.2 配置 Maven 镜像仓库（解决网络连接超时）"></a>5.2 配置 Maven 镜像仓库（解决网络连接超时）</h3><ul><li><p>编辑 <code>~/.m2/settings.xml</code>，添加阿里云镜像：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Aliyun Maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 IntelliJ IDEA 中指定 <code>settings.xml</code> 路径。</p></li></ul><h3 id="5-3-强制刷新-Maven-本地仓库与项目"><a href="#5-3-强制刷新-Maven-本地仓库与项目" class="headerlink" title="5.3 强制刷新 Maven 本地仓库与项目"></a>5.3 强制刷新 Maven 本地仓库与项目</h3><ul><li><p>删除本地仓库中相关 <code>.lastUpdated</code> 文件或整个依赖文件夹</p></li><li><p>运行命令强制更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean install -U<br></code></pre></td></tr></table></figure></li><li><p>在 IntelliJ IDEA 中点击 Maven Projects → Reimport All Maven Projects，并勾选 Force Update</p></li></ul><h3 id="5-4-IntelliJ-IDEA-相关操作"><a href="#5-4-IntelliJ-IDEA-相关操作" class="headerlink" title="5.4 IntelliJ IDEA 相关操作"></a>5.4 IntelliJ IDEA 相关操作</h3><ul><li>清除缓存并重启：<br><code>File → Invalidate Caches / Restart... → Invalidate and Restart</code></li></ul><h3 id="5-5-其他网络排查建议"><a href="#5-5-其他网络排查建议" class="headerlink" title="5.5 其他网络排查建议"></a>5.5 其他网络排查建议</h3><ul><li>检查本地防火墙设置</li><li>确保 DNS 能正确解析 Maven 仓库地址</li></ul><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>你遇到的 Maven POM 配置问题，是中国地区网络限制、Maven 缓存机制和 ESET 杀毒软件三者共同作用的结果。<br>通过<strong>添加 ESET 排除项</strong>、<strong>配置国内镜像</strong>、<strong>强制刷新依赖</strong>和<strong>清理 IDEA 缓存</strong>，可以彻底解决此类问题。</p><hr><blockquote><p><strong>遇到问题不可怕，关键是科学排查与系统解决。祝你开发顺利！</strong></p></blockquote><hr><p><em>如有更多问题，欢迎留言或通过 <a href="https://github.com/Changhuaishui">GitHub</a> 联系我。</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>Maven</tag>
      
      <tag>依赖</tag>
      
      <tag>IntelliJ</tag>
      
      <tag>POM</tag>
      
      <tag>ESET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Welcome to My Tech Blog</title>
    <link href="/2025/07/07/hello-world/"/>
    <url>/2025/07/07/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="👋-你好，欢迎来到我的技术博客！"><a href="#👋-你好，欢迎来到我的技术博客！" class="headerlink" title="👋 你好，欢迎来到我的技术博客！"></a>👋 你好，欢迎来到我的技术博客！</h1><blockquote><p><strong>热爱生活，持续成长。</strong></p></blockquote><hr><h2 id="🚀-关于我"><a href="#🚀-关于我" class="headerlink" title="🚀 关于我"></a>🚀 关于我</h2><ul><li>Java开发者，热衷于探索  技术与前沿趋势</li><li>擅长 Java&#x2F;Vue &#x2F; Node.js</li><li>喜欢分享、乐于交流，追求极致的用户体验与代码美学</li><li><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/image/DORO/%E8%9C%98%E8%9B%9Bdoro.gif" alt="蜘蛛doro"></li></ul><hr><h2 id="📝-博客内容"><a href="#📝-博客内容" class="headerlink" title="📝 博客内容"></a>📝 博客内容</h2><ul><li>前端开发实战与源码解析</li><li>技术难题解决方案与心得</li><li>工具链、自动化与效率提升</li><li>个人成长与学习方法</li></ul><hr><h2 id="🌐-让我们一起进步"><a href="#🌐-让我们一起进步" class="headerlink" title="🌐 让我们一起进步"></a>🌐 让我们一起进步</h2><p>欢迎关注、交流、讨论前端与技术相关话题！<br>你可以在评论区留言，或通过 <a href="https://github.com/Changhuaishui">GitHub</a> 联系我。</p><hr><blockquote><p><strong>Keep Coding, Keep Thinking.</strong></p></blockquote><hr><p><em>本博客基于 <a href="https://hexo.io/">Hexo</a> 搭建，致力于打造简约、科技感十足的技术分享空间。</em></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>技术</tag>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC 中的 CORS 与 Controller 局部处理实践</title>
    <link href="/2025/01/14/SpringMVC%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86%E4%B8%8EController%E5%B1%80%E9%83%A8%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/01/14/SpringMVC%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86%E4%B8%8EController%E5%B1%80%E9%83%A8%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>在Web开发中，跨域问题是前后端分离架构下经常遇到的问题。最近在项目中深入研究了Spring MVC的CORS处理机制，总结了一些实用的经验和最佳实践。</p><h2 id="跨域基础概念"><a href="#跨域基础概念" class="headerlink" title="跨域基础概念"></a>跨域基础概念</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>浏览器的同源策略是一个重要的安全机制，只有当协议、域名、端口三者完全相同时，才被认为是同源。任何一个不同都会触发跨域限制。</p><h3 id="CORS机制"><a href="#CORS机制" class="headerlink" title="CORS机制"></a>CORS机制</h3><p>CORS（Cross-Origin Resource Sharing，跨域资源共享）是W3C标准，允许服务器声明哪些源站有权限访问资源。关键在于：<strong>跨域访问的控制权在服务端，而非前端</strong>。</p><h2 id="Spring-MVC中的CORS处理策略"><a href="#Spring-MVC中的CORS处理策略" class="headerlink" title="Spring MVC中的CORS处理策略"></a>Spring MVC中的CORS处理策略</h2><h3 id="全局配置方式"><a href="#全局配置方式" class="headerlink" title="全局配置方式"></a>全局配置方式</h3><p>通过实现<code>WebMvcConfigurer</code>接口，可以为整个应用设置统一的CORS策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/api/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:3000&quot;</span>, <span class="hljs-string">&quot;https://yourdomain.com&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>全局配置的优势：</strong></p><ul><li>一次配置，全局生效</li><li>统一管理CORS策略</li><li>自动处理预检请求（OPTIONS）</li></ul><h3 id="局部配置方式"><a href="#局部配置方式" class="headerlink" title="局部配置方式"></a>局部配置方式</h3><p>使用<code>@CrossOrigin</code>注解可以在控制器级别或方法级别进行精细化控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@CrossOrigin(origins = &quot;http://localhost:3000&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatController</span> &#123;<br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/chat&quot;)</span><br>    <span class="hljs-meta">@CrossOrigin(origins = &quot;https://admin.yourdomain.com&quot;, methods = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ChatRequest request)</span> &#123;<br>        <span class="hljs-comment">// 业务逻辑</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;success&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>配置优先级：</strong><br>方法级<code>@CrossOrigin</code> &gt; 类级<code>@CrossOrigin</code> &gt; 全局<code>addCorsMappings</code></p><h2 id="跨域请求的完整流程"><a href="#跨域请求的完整流程" class="headerlink" title="跨域请求的完整流程"></a>跨域请求的完整流程</h2><ol><li><strong>预检请求阶段</strong>：浏览器发送OPTIONS请求，询问服务器是否允许跨域</li><li><strong>服务器响应</strong>：根据CORS配置返回相应的<code>Access-Control-Allow-*</code>头部</li><li><strong>实际请求</strong>：预检通过后，浏览器发送真正的业务请求</li><li><strong>业务处理</strong>：请求进入Controller方法执行具体业务逻辑</li><li><strong>响应返回</strong>：服务器在响应中继续添加CORS头部，浏览器验证后放行</li></ol><h2 id="与Spring-Security的集成"><a href="#与Spring-Security的集成" class="headerlink" title="与Spring Security的集成"></a>与Spring Security的集成</h2><p>当项目使用Spring Security时，需要确保CORS处理在安全过滤器链之前执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.cors().and()<br>            .authorizeHttpRequests(auth -&gt; <br>                auth.requestMatchers(HttpMethod.OPTIONS, <span class="hljs-string">&quot;/**&quot;</span>).permitAll()<br>                    .anyRequest().authenticated()<br>            );<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开发环境与生产环境的不同策略"><a href="#开发环境与生产环境的不同策略" class="headerlink" title="开发环境与生产环境的不同策略"></a>开发环境与生产环境的不同策略</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p><strong>方案一：后端配置CORS</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开发环境可以相对宽松</span><br>registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>        .allowedOrigins(<span class="hljs-string">&quot;http://localhost:3000&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:3000&quot;</span>)<br>        .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>        .allowCredentials(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>方案二：前端代理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vite.config.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><p>生产环境应该采用最小权限原则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addMapping(<span class="hljs-string">&quot;/api/**&quot;</span>)<br>        .allowedOrigins(<span class="hljs-string">&quot;https://yourdomain.com&quot;</span>)<br>        .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>)<br>        .allowedHeaders(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>)<br>        .allowCredentials(<span class="hljs-literal">true</span>)<br>        .maxAge(<span class="hljs-number">86400</span>); <span class="hljs-comment">// 24小时缓存</span><br></code></pre></td></tr></table></figure><h2 id="实际项目中的最佳实践"><a href="#实际项目中的最佳实践" class="headerlink" title="实际项目中的最佳实践"></a>实际项目中的最佳实践</h2><h3 id="1-分层配置策略"><a href="#1-分层配置策略" class="headerlink" title="1. 分层配置策略"></a>1. 分层配置策略</h3><ul><li><strong>全局配置</strong>：设置通用的CORS规则，作为默认策略</li><li><strong>局部配置</strong>：针对特殊接口进行精细化控制</li></ul><h3 id="2-安全考虑"><a href="#2-安全考虑" class="headerlink" title="2. 安全考虑"></a>2. 安全考虑</h3><ul><li>生产环境避免使用通配符<code>*</code></li><li>明确指定允许的域名、方法和头部</li><li>合理设置缓存时间<code>maxAge</code></li></ul><h3 id="3-调试技巧"><a href="#3-调试技巧" class="headerlink" title="3. 调试技巧"></a>3. 调试技巧</h3><ul><li>使用浏览器开发者工具查看预检请求</li><li>检查响应头中的<code>Access-Control-*</code>字段</li><li>注意区分预检请求和实际请求的处理</li></ul><h2 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a>常见问题排查</h2><h3 id="问题1：预检请求被拦截"><a href="#问题1：预检请求被拦截" class="headerlink" title="问题1：预检请求被拦截"></a>问题1：预检请求被拦截</h3><p><strong>现象</strong>：OPTIONS请求返回403或404<br><strong>解决</strong>：确保Spring Security允许OPTIONS请求通过</p><h3 id="问题2：Cookie无法携带"><a href="#问题2：Cookie无法携带" class="headerlink" title="问题2：Cookie无法携带"></a>问题2：Cookie无法携带</h3><p><strong>现象</strong>：跨域请求无法携带认证信息<br><strong>解决</strong>：设置<code>allowCredentials(true)</code>，且不能使用通配符域名</p><h3 id="问题3：自定义头部被拒绝"><a href="#问题3：自定义头部被拒绝" class="headerlink" title="问题3：自定义头部被拒绝"></a>问题3：自定义头部被拒绝</h3><p><strong>现象</strong>：请求头如<code>X-Token</code>无法发送<br><strong>解决</strong>：在<code>allowedHeaders</code>中明确添加自定义头部</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CORS处理的核心思想是”全局兜底，局部特化”。通过合理的配置策略，既能保证开发效率，又能确保生产环境的安全性。记住，跨域访问的决定权始终在服务端，前端只是发起请求的一方。</p><p>在实际开发中，建议优先使用全局配置建立基础规则，然后根据具体业务需求使用<code>@CrossOrigin</code>注解进行精细化控制。这样既保持了配置的一致性，又提供了足够的灵活性。</p>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>MVC</tag>
      
      <tag>CORS</tag>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA Spring Initializr连接被拒绝问题解决方案</title>
    <link href="/2024/07/16/IntelliJIDEASpringInitializrConnection/"/>
    <url>/2024/07/16/IntelliJIDEASpringInitializrConnection/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用IntelliJ IDEA中的Spring Initializr创建项目时，遇到以下错误提示：</p><blockquote><p>‘<a href="https://start.spring.io/">https://start.spring.io</a>‘ 的初始化失败<br>Cannot download ‘<a href="https://start.spring.io/">https://start.spring.io</a>‘: Connection refused: getsockopt</p></blockquote><p>IDEA提示需要检查URL、网络和代理设置。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="错误类型分析"><a href="#错误类型分析" class="headerlink" title="错误类型分析"></a>错误类型分析</h3><ul><li>“Connection refused: getsockopt” 表示客户端（IntelliJ IDEA）尝试连接服务器（start.spring.io）时，服务器主动拒绝了连接。</li><li>这通常不是服务器宕机，而是中间存在阻碍，如防火墙、代理问题，或目标端口未开放。</li><li><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/IntelliJ-IDEA-Spring-Initializr-Connection-Refused/1752501025386.png" alt="错误提示"></li></ul><h3 id="常见原因"><a href="#常见原因" class="headerlink" title="常见原因"></a>常见原因</h3><ol><li>本地防火墙或杀毒软件阻止了IDEA的出站连接</li><li>VPN网络配置导致连接受阻</li><li>代理设置不正确或缺失</li><li>SSL&#x2F;TLS证书或代理对HTTPS连接的处理问题</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-检查IDEA代理配置"><a href="#1-检查IDEA代理配置" class="headerlink" title="1. 检查IDEA代理配置"></a>1. 检查IDEA代理配置</h3><ol><li>打开 <code>File -&gt; Settings -&gt; Appearance and Behavior -&gt; System Settings -&gt; HTTP Proxy</code></li><li>选择”Auto-detect proxy settings”（自动检测代理设置）</li><li>或设置”Automatic proxy configuration URL”（自动代理配置URL）</li><li>应用并重启IDEA</li><li>如图：<img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/_posts/image/IntelliJ-IDEA-Spring-Initializr-Connection-Refused/1752501066694.png" alt="代理设置"></li></ol><h3 id="2-协议更改"><a href="#2-协议更改" class="headerlink" title="2. 协议更改"></a>2. 协议更改</h3><ul><li>尝试将 <code>https://start.spring.io</code> 改为 <code>http://start.spring.io</code> 访问</li><li>某些网络环境下，HTTP协议可绕过SSL&#x2F;代理相关问题</li></ul><h3 id="3-检查本地网络环境"><a href="#3-检查本地网络环境" class="headerlink" title="3. 检查本地网络环境"></a>3. 检查本地网络环境</h3><ul><li>关闭本地防火墙&#x2F;杀毒软件后重试</li><li>断开VPN后重试</li></ul><h3 id="4-其他可能性"><a href="#4-其他可能性" class="headerlink" title="4. 其他可能性"></a>4. 其他可能性</h3><ul><li>历史上 initializr 项目曾有相关 <a href="https://github.com/spring-io/initializr/issues/267">issue</a>，但目前服务稳定</li><li>若上述方法无效，可尝试命令行或浏览器直接访问 start.spring.io，排查本地网络问题</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次连接问题主要由IntelliJ IDEA的HTTP代理配置不正确导致。通过在IDEA中自动检测并配置代理设置，问题得以解决。同时，在特定网络环境下，尝试HTTP协议而非HTTPS或检查本地防火墙&#x2F;VPN也是有效的排查方向。</p>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
      <category>Spring</category>
      
      <category>IDEA</category>
      
      <category>网络问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IntelliJ IDEA</tag>
      
      <tag>Spring Initializr</tag>
      
      <tag>代理</tag>
      
      <tag>网络</tag>
      
      <tag>错误分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理配置导致的Git连接问题分析与解决</title>
    <link href="/2023/07/14/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E5%AF%BC%E8%87%B4%E7%9A%84Git%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/07/14/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E5%AF%BC%E8%87%B4%E7%9A%84Git%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用IntelliJ IDEA配置GitHub远程仓库时，遇到了连接问题。这个问题的根源在于本地的代理配置与Git的全局代理设置之间的冲突。本文将详细分析问题原因并提供解决方案。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="端口配置分析"><a href="#端口配置分析" class="headerlink" title="端口配置分析"></a>端口配置分析</h3><p><img src="https://raw.githubusercontent.com/Changhuaishui/chenji/main/source/image/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E5%AF%BC%E8%87%B4%E7%9A%84Git%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E7%AB%AF%E5%8F%A3%E9%80%89%E9%A1%B9.png" alt="代理端口配置"></p><p>从截图中可以看到三种不同的代理端口配置：</p><ol><li><p><strong>HTTP(S) 代理端口 (7899)</strong></p><ul><li>功能：专门处理HTTP和HTTPS流量的代理端口</li><li>应用场景：浏览器、Git等应用访问网页时使用</li><li>与问题的关联：这是导致Git连接问题的核心，因为GitHub仓库地址是https:&#x2F;&#x2F;开头，Git尝试使用HTTPS协议，而本地Git配置将所有HTTPS流量都导向了127.0.0.1:7899</li></ul></li><li><p><strong>SOCKS 代理端口 (7898)</strong></p><ul><li>功能：底层网络代理协议，可处理几乎所有类型的网络连接</li><li>应用场景：游戏、聊天软件、FTP等多种网络应用</li><li>与问题的关联：此次问题与它无关，因为Git默认配置使用HTTP&#x2F;HTTPS代理端口</li></ul></li><li><p><strong>混合代理端口 (7890)</strong></p><ul><li>功能：”混合模式”或”TUN&#x2F;TAP模式”，创建虚拟网卡接管几乎所有网络流量</li><li>应用场景：无需为每个应用单独设置代理</li><li>状态：截图显示此功能处于关闭状态</li><li>与问题的关联：此次问题与它无关</li></ul></li></ol><h3 id="问题的两个阶段"><a href="#问题的两个阶段" class="headerlink" title="问题的两个阶段"></a>问题的两个阶段</h3><h4 id="阶段一：代理软件未开启，但Git配置中有代理设置"><a href="#阶段一：代理软件未开启，但Git配置中有代理设置" class="headerlink" title="阶段一：代理软件未开启，但Git配置中有代理设置"></a>阶段一：代理软件未开启，但Git配置中有代理设置</h4><ul><li><strong>状态</strong>：代理软件未运行或HTTP(S)代理功能关闭，但Git全局设置中配置了”所有HTTPS流量请访问127.0.0.1:7899”</li><li><strong>错误信息</strong>：<code>Failed to connect to 127.0.0.1 port 7899: Could not connect to server</code>（连接被拒绝）</li><li><strong>原因</strong>：IntelliJ IDEA通过Git尝试访问本地127.0.0.1的7899端口，但由于代理服务未启动，该端口没有服务在监听，导致连接被拒绝</li></ul><h4 id="阶段二：代理软件开启后产生的新问题"><a href="#阶段二：代理软件开启后产生的新问题" class="headerlink" title="阶段二：代理软件开启后产生的新问题"></a>阶段二：代理软件开启后产生的新问题</h4><ul><li><strong>状态</strong>：开启代理软件后，7899端口有服务在监听</li><li><strong>错误信息</strong>：<code>unable to access &#39;...&#39;: TLS connect error</code>（TLS连接错误）</li><li><strong>原因</strong>：<ul><li>Git成功连接到7899端口的代理服务</li><li>代理软件尝试代替用户连接github.com</li><li>问题出在HTTPS的TLS&#x2F;SSL加密握手环节，代理干扰了正常的加密流程</li><li>Git客户端认为连接不安全，报错并中断连接（这是一个典型的”中间人”问题）</li></ul></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>最终的解决方法是清除Git全局配置中的代理设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><p>这些命令清除了Git全局配置中的代理规则，使Git不再尝试通过7899端口访问，而是直接连接到github.com。只要电脑能直接访问GitHub，连接就能成功。</p><h2 id="Git远程仓库初始化过程"><a href="#Git远程仓库初始化过程" class="headerlink" title="Git远程仓库初始化过程"></a>Git远程仓库初始化过程</h2><p>以下是Git远程仓库初始化的基本步骤：</p><ol><li><p>检查当前远程仓库配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure></li><li><p>清除Git全局代理设置（如果存在）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy &amp;&amp; git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure></li><li><p>添加远程仓库（如果需要）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://github.com/username/repository.git<br></code></pre></td></tr></table></figure></li><li><p>推送本地代码到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure></li></ol><h2 id="网络代理知识点总结"><a href="#网络代理知识点总结" class="headerlink" title="网络代理知识点总结"></a>网络代理知识点总结</h2><h3 id="代理端口的网络原理"><a href="#代理端口的网络原理" class="headerlink" title="代理端口的网络原理"></a>代理端口的网络原理</h3><ol><li><p><strong>HTTP(S)代理端口 (7899)</strong></p><ul><li>工作在应用层，专门处理HTTP&#x2F;HTTPS协议</li><li>通信过程：客户端 → 代理服务器 → 目标服务器</li><li>代理服务器可以查看和修改HTTP请求和响应的内容</li><li>HTTPS连接会涉及TLS&#x2F;SSL加密，代理需要特殊处理才能不破坏加密</li></ul></li><li><p><strong>SOCKS代理端口 (7898)</strong></p><ul><li>工作在会话层，更接近底层</li><li>不关心具体的应用层协议，只负责转发TCP&#x2F;UDP数据包</li><li>更通用，可以处理各种网络协议的流量</li><li>通常不会干扰加密连接的完整性</li></ul></li><li><p><strong>混合代理端口 (7890)</strong></p><ul><li>通常结合了TUN&#x2F;TAP虚拟网卡技术</li><li>工作在网络层或数据链路层</li><li>可以接管系统级别的网络流量</li><li>通常配合规则系统实现智能分流</li></ul></li></ol><h2 id="经验总结与建议"><a href="#经验总结与建议" class="headerlink" title="经验总结与建议"></a>经验总结与建议</h2><ol><li><p><strong>按需使用代理</strong>：对于Git、Maven、npm等开发工具，如果网络环境允许直接访问，建议不设置代理，以获得最稳定的连接。</p></li><li><p><strong>“用后清理”是个好习惯</strong>：临时使用代理后，记得清除相关配置，避免后续遇到”连接被拒绝”的问题。</p></li><li><p><strong>理解工具的行为</strong>：许多代理工具会自动修改系统或应用配置，了解这一点有助于在遇到网络问题时快速定位。</p></li><li><p><strong>检查网络连接问题的思路</strong>：</p><ul><li>首先检查本地网络和代理设置</li><li>确认目标服务是否可达</li><li>检查应用程序的网络配置</li><li>考虑防火墙、VPN等可能的干扰因素</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IntelliJ IDEA</tag>
      
      <tag>问题排查</tag>
      
      <tag>Git</tag>
      
      <tag>网络代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
